import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.logging.Level;
import java.util.logging.Logger;
/*
 * @author Khaled
 */

public  class GeneratorReader {
  
     
    public static void main(String[] args) {
       ExecutorService executor = Executors.newFixedThreadPool(3);
       executor.execute(new Generator());
       executor.execute(new ReaderEvenNumbers());
       executor.execute(new ReaderOddNumbers());
       executor.shutdown();
        
    }  
    // Inner class
    static class Generator extends Thread {
        
    @Override
    public void run() {
        int nbGeneratedNumbers = 100;
        int c = 1;
        while(c < nbGeneratedNumbers){
            try {
                Buffer.generateData((int) this.getId());
            } catch (InterruptedException ex) {
                Logger.getLogger(GeneratorReader.class.getName()).log(Level.SEVERE, null, ex);
            }
				c++;
          }//end while
        }
    }
    // Inner class
    static class ReaderEvenNumbers extends Thread {
    @Override
    public void run() {
        while (true) {
                Buffer.ReadEvenData((int)this.getId());
        }// end while

    }
}
 // Inner class   
    static class ReaderOddNumbers extends Thread {
    @Override
    public void run() {
        while(true) { 
               Buffer.ReadOddData((int)this.getId());
        }//end while
    }
}   
  // inner class for the buffer
    static class Buffer {
        public static int data = -1;
        public static ReentrantLock lock = new ReentrantLock();
        public static Condition c = lock.newCondition();
        public static Condition c2 = lock.newCondition();
        public static boolean GeneratorTurn = true;
        public static int getData() {   
                return data;
        }
        
        public static void generateData(int id) throws InterruptedException {
                lock.lock();
                try{
                    while(!GeneratorTurn){
                        c.await();
                    }
                        Buffer.data = (int) (Math.random() * (20));
                System.out.println("The number " + Buffer.data + " is generated by Generator Thread. ");
                
                GeneratorTurn=false;
                c2.signalAll();
                }catch(Exception ex){}
                finally{
                    lock.unlock();
                }
            
        }
          
        public static void ReadOddData(int id) {
                lock.lock();
                int x = Buffer.getData();
                
                try{
                     while(GeneratorTurn){
                          c2.await();
                      }
                     if (x%2 ==0){
                System.out.println("Thread ReaderOddNumbers is NOT concerned by number: " + x );
                }
                else {
                System.out.println("The number " + Buffer.data + " is read by ReadOddNumbers Thread. ");
                GeneratorTurn=true;
                c.signalAll();
               
                }
                }catch(Exception ex){}
                finally{
                    lock.unlock();
                }
               
        }
        
        public static void ReadEvenData(int id)  {
                  lock.lock();
                  try{
                      while(GeneratorTurn){
                          c2.await();
                      }
                      int x = Buffer.getData();
                if (x%2 !=0){
                System.out.println("Thread ReaderEvenNumbers is NOT concerned by number: " + x ); 
                }
                else {
                System.out.println("The number " + Buffer.data + " is read by ReadEvenNumbers Thread ");
                GeneratorTurn=true;
                c.signalAll();
                }   
                  }
               catch(Exception ex){}
                finally{     
                    lock.unlock();
                }
        }

   }//End of Buffer class
}//end of GeneratorReader